@page "/team"
@attribute [Authorize(Roles = "Admin")]
@layout Components.Layout.MainLayout
@rendermode InteractiveServer

@using GiftOfTheGiver_Foundation.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthStateProvider
@using VolunteerModel = GiftOfTheGiver_Foundation.Models.Volunteer
@using GiftOfTheGiver_Foundation.Components.Account.Shared

<PageTitle>Team Management</PageTitle>

<div class="report-card mb-4">
    <AntiforgeryToken />
    <div class="card-header">
        <h3 class="card-header-title">Volunteer Team Management</h3>
    </div>
    <div class="card-body">

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-danger" role="alert">
                <h5 class="alert-heading">Action Required!</h5>
                <p>@successMessage</p>
            </div>
        }

        <p>This page lists all registered volunteers. Use the actions to manage your team.</p>

        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Volunteer Full Name</th>
                        <th>Volunteer Contact Number</th>
                        <th>Availability</th>
                        <th>Contribution</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (volunteers.Any())
                    {
                        @foreach (var volunteer in volunteers)
                        {
                            <tr>
                                <td>@volunteer.VolunteerName</td>
                                <td>@volunteer.VolunteerContact</td>
                                <td>@GetFullAvailabilityText(volunteer.Availability)</td>
                                <td>@volunteer.HelpType</td>
                                <td>
                                    @if (volunteer.ApprovedDate.HasValue)
                                    {
                                        <button class="btn btn-secondary btn-sm me-2" disabled>Approved</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-success btn-sm me-2" @onclick="() => StartApprovalProcess(volunteer)">Approve</button>
                                    }
                                    <button class="btn btn-danger btn-sm" @onclick="() => RemoveVolunteer(volunteer.VolunteerId)">Remove</button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" class="text-center">No volunteers have signed up yet.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="report-card">
    <div class="card-header">
        <h3 class="card-header-title">User Administration</h3>
    </div>
    <div class="card-body">

        @if (!string.IsNullOrEmpty(userManagementMessage))
        {
            <div class="alert alert-info" role="alert">
                <p>@userManagementMessage</p>
            </div>
        }

        <p>Promote approved volunteers to administrators or demote existing administrators.</p>

        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>User Email</th>
                        <th>Current Role</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (users.Any())
                    {
                        @foreach (var user in users)
                        {
                            var isUserAdmin = adminStatus.ContainsKey(user.Id) && adminStatus[user.Id];
                            <tr>
                                <td>@user.Email</td>
                                <td>
                                    @if (isUserAdmin)
                                    {
                                        <span class="badge bg-primary">Admin</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">User</span>
                                    }
                                </td>
                                <td>
                                    @if (isUserAdmin)
                                    {
                                        <button class="btn btn-warning btn-sm" @onclick="() => DemoteFromAdmin(user)">Demote from Admin</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-success btn-sm" @onclick="() => PromoteToAdmin(user)">Promote to Admin</button>
                                    }
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="3" class="text-center">No approved and linked volunteers found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<LinkUserModal IsVisible="showLinkModal"
               VolunteerToApprove="volunteerToApprove"
               OnCancel="CancelApprovalProcess"
               OnConfirm="FinalizeApproval" />


@code {
    private List<VolunteerModel> volunteers = new();
    private string? successMessage;

    // Properties for User Administration
    private List<ApplicationUser> users = new();
    private Dictionary<string, bool> adminStatus = new();
    private string? userManagementMessage;
    private string? currentUserId;

    // NEW PROPERTIES FOR MODAL
    private bool showLinkModal = false;
    private VolunteerModel? volunteerToApprove;

    protected override async Task OnInitializedAsync()
    {
        await LoadVolunteers();
        await LoadUsers();

        // Get the current user's ID for safety checks
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
    }

    private async Task LoadVolunteers()
    {
        // Clear any old messages
        successMessage = null;
        try
        {
            await using var dbContext = await DbFactory.CreateDbContextAsync();
            volunteers = await dbContext.Volunteers
                            .OrderByDescending(v => v.VolunteerId) // Show newest first
                            .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading volunteers: {ex.Message}");
        }
    }

    // --- MODIFIED METHOD: Applies the security fix ---
    private async Task LoadUsers()
    {
        userManagementMessage = null;
        try
        {
            // 1. Get the IDs of all volunteers who are *approved* AND *linked* to a user
            await using var dbContext = await DbFactory.CreateDbContextAsync();
            var approvedVolunteerUserIds = await dbContext.Volunteers
                .Where(v => v.ApprovedDate.HasValue && v.ApplicationUserId != null)
                .Select(v => v.ApplicationUserId)
                .Distinct()
                .ToListAsync();

            // 2. Load *only* the users who match those IDs
            users = await UserManager.Users
                .Where(u => approvedVolunteerUserIds.Contains(u.Id))
                .OrderBy(u => u.Email)
                .ToListAsync();

            // 3. Cache the admin status for this filtered list
            adminStatus.Clear();
            foreach (var user in users)
            {
                adminStatus[user.Id] = await UserManager.IsInRoleAsync(user, "Admin");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
            userManagementMessage = "Error loading user list.";
        }
    }

    // --- NEW METHODS FOR MODAL WORKFLOW ---
    private void StartApprovalProcess(VolunteerModel volunteer)
    {
        volunteerToApprove = volunteer;
        showLinkModal = true;
    }

    private void CancelApprovalProcess()
    {
        showLinkModal = false;
        volunteerToApprove = null;
    }

    private async Task FinalizeApproval(string? applicationUserId)
    {
        if (volunteerToApprove == null) return;

        // Call the *actual* approval logic, passing the linked user ID (or null)
        await ApproveVolunteer(volunteerToApprove.VolunteerId, applicationUserId);

        // Hide and reset
        showLinkModal = false;
        volunteerToApprove = null;
    }

    // --- MODIFIED METHOD: Now accepts the linked user ID ---
    private async Task ApproveVolunteer(int volunteerId, string? applicationUserId)
    {
        try
        {
            await using var dbContext = await DbFactory.CreateDbContextAsync();
            var volunteer = await dbContext.Volunteers.FindAsync(volunteerId);

            if (volunteer != null && !volunteer.ApprovedDate.HasValue)
            {
                volunteer.ApprovedDate = DateTime.UtcNow;
                
                // Save the link to the user account (it's null if they skipped)
                volunteer.ApplicationUserId = applicationUserId;
                
                await dbContext.SaveChangesAsync();

                // Set the success snackbar message
                successMessage = $"Successfully approved {volunteer.VolunteerName}. REMINDER: Please contact them at {volunteer.VolunteerContact} to inform them and assign an event.";
                
                // Update the item in the local list to refresh the UI
                var itemInList = volunteers.FirstOrDefault(v => v.VolunteerId == volunteerId);
                if (itemInList != null)
                {
                    itemInList.ApprovedDate = volunteer.ApprovedDate;
                    itemInList.ApplicationUserId = volunteer.ApplicationUserId; // Update local record
                    StateHasChanged();
                }

                // After approving, reload the user list in case this new volunteer
                // is eligible to be promoted.
                await LoadUsers();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error approving volunteer {volunteerId}: {ex.Message}");
            successMessage = "Error occurred while approving the volunteer.";
            StateHasChanged();
        }
    }

    private async Task RemoveVolunteer(int volunteerId)
    {
        try
        {
            await using var dbContext = await DbFactory.CreateDbContextAsync();
            var volunteer = await dbContext.Volunteers.FindAsync(volunteerId);

            if (volunteer != null)
            {
                // Before removing, check if we need to update the user list
                string? linkedUserId = volunteer.ApplicationUserId;

                dbContext.Volunteers.Remove(volunteer);
                await dbContext.SaveChangesAsync();

                // Remove from the local list and refresh the UI
                volunteers.RemoveAll(v => v.VolunteerId == volunteerId);
                
                // If the removed volunteer was linked, reload the user list
                if (linkedUserId != null)
                {
                    await LoadUsers();
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing volunteer {volunteerId}: {ex.Message}");
        }
    }

    private async Task PromoteToAdmin(ApplicationUser userToPromote)
    {
        userManagementMessage = null;
        try
        {
            if (userToPromote == null) return;

            var isAdmin = await UserManager.IsInRoleAsync(userToPromote, "Admin");
            if (!isAdmin)
            {
                var result = await UserManager.AddToRoleAsync(userToPromote, "Admin");

                if (result.Succeeded)
                {
                    userManagementMessage = $"Successfully promoted {userToPromote.Email} to Admin.";
                    adminStatus[userToPromote.Id] = true; // Update local state
                }
                else
                {
                    var errors = string.Join(", ", result.Errors.Select(e => e.Description));
                    userManagementMessage = $"Error promoting user: {errors}";
                }
            }
            else
            {
                userManagementMessage = $"{userToPromote.Email} is already an Admin.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error promoting user {userToPromote.Id}: {ex.Message}");
            userManagementMessage = "An internal error occurred while promoting the user.";
        }

        StateHasChanged();
    }

    private async Task DemoteFromAdmin(ApplicationUser userToDemote)
    {
        userManagementMessage = null;
        try
        {
            if (userToDemote == null) return;

            // Safety check: Do not allow an admin to demote themselves.
            if (userToDemote.Id == currentUserId)
            {
                userManagementMessage = "Error: You cannot demote yourself from the Admin role.";
                StateHasChanged();
                return;
            }

            var isAdmin = await UserManager.IsInRoleAsync(userToDemote, "Admin");
            if (isAdmin)
            {
                var result = await UserManager.RemoveFromRoleAsync(userToDemote, "Admin");

                if (result.Succeeded)
                {
                    userManagementMessage = $"Successfully demoted {userToDemote.Email} from Admin.";
                    adminStatus[userToDemote.Id] = false; // Update local state
                }
                else
                {
                    var errors = string.Join(", ", result.Errors.Select(e => e.Description));
                    userManagementMessage = $"Error demoting user: {errors}";
                }
            }
            else
            {
                userManagementMessage = $"{userToDemote.Email} is not an Admin.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error demoting user {userToDemote.Id}: {ex.Message}");
            userManagementMessage = "An internal error occurred while demoting the user.";
        }

        StateHasChanged();
    }

    // Helper method to display full availability text
    private string GetFullAvailabilityText(string availabilityValue)
    {
        switch (availabilityValue)
        {
            case "Weekdays-All":
                return "Weekdays - all day";
            case "Weekdays-AM":
                return "Weekdays - 08:00am to 12:00am";
            case "Weekdays-PM":
                return "Weekdays - 13:00pm to 17:00";
            case "Saturday-All":
                return "Saturday - all day";
            case "Saturday-AM":
                return "Saturday - 08:00am to 12:00am";
            case "Saturday-PM":
                return "Saturday - 13:00pm to 17:00";
            default:
                return availabilityValue;
        }
    }
}