@page "/team"
@attribute [Authorize(Roles = "Admin")]
@layout Components.Layout.MainLayout
@rendermode InteractiveServer

@using GiftOfTheGiver_Foundation.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@using VolunteerModel = GiftOfTheGiver_Foundation.Models.Volunteer

<PageTitle>Volunteer Team</PageTitle>

<div class="report-card">
    <AntiforgeryToken />
    <div class="card-header">
        <h3 class="card-header-title">Volunteer Team</h3>
    </div>
    <div class="card-body">

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-danger" role="alert">
                <h5 class="alert-heading">Action Required!</h5>
                <p>@successMessage</p>
            </div>
        }

        <p>This page lists all registered volunteers. Use the actions to manage your team.</p>

        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Volunteer Full Name</th>
                        <th>Volunteer Contact Number</th>
                        <th>Availability</th>
                        <th>Contribution</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (volunteers.Any())
                    {
                        @foreach (var volunteer in volunteers)
                        {
                            <tr>
                                <td>@volunteer.VolunteerName</td>
                                <td>@volunteer.VolunteerContact</td>
                                <td>@GetFullAvailabilityText(volunteer.Availability)</td>
                                <td>@volunteer.HelpType</td>
                                <td>
                                    @if (volunteer.ApprovedDate.HasValue)
                                    {
                                        <button class="btn btn-secondary btn-sm me-2" disabled>Approved</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-success btn-sm me-2" @onclick="() => ApproveVolunteer(volunteer.VolunteerId)">Approve</button>
                                    }
                                    <button class="btn btn-danger btn-sm" @onclick="() => RemoveVolunteer(volunteer.VolunteerId)">Remove</button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" class="text-center">No volunteers have signed up yet.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private List<VolunteerModel> volunteers = new();
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadVolunteers();
    }

    private async Task LoadVolunteers()
    {
        // Clear any old messages
        successMessage = null;
        try
        {
            await using var dbContext = await DbFactory.CreateDbContextAsync();
            volunteers = await dbContext.Volunteers
                            .OrderByDescending(v => v.VolunteerId) // Show newest first
                            .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading volunteers: {ex.Message}");
        }
    }

    private async Task ApproveVolunteer(int volunteerId)
    {
        try
        {
            await using var dbContext = await DbFactory.CreateDbContextAsync();
            var volunteer = await dbContext.Volunteers.FindAsync(volunteerId);

            if (volunteer != null && !volunteer.ApprovedDate.HasValue)
            {
                volunteer.ApprovedDate = DateTime.UtcNow;
                await dbContext.SaveChangesAsync();

                // Set the success snackbar message
                successMessage = $"Successfully approved {volunteer.VolunteerName}. REMINDER: Please contact them at {volunteer.VolunteerContact} to inform them and assign an event.";
                // Update the item in the local list to refresh the UI
                var itemInList = volunteers.FirstOrDefault(v => v.VolunteerId == volunteerId);
                if (itemInList != null)
                {
                    itemInList.ApprovedDate = volunteer.ApprovedDate;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error approving volunteer {volunteerId}: {ex.Message}");
        }
    }

    private async Task RemoveVolunteer(int volunteerId)
    {
        try
        {
            await using var dbContext = await DbFactory.CreateDbContextAsync();
            var volunteer = await dbContext.Volunteers.FindAsync(volunteerId);

            if (volunteer != null)
            {
                dbContext.Volunteers.Remove(volunteer);
                await dbContext.SaveChangesAsync();

                // Remove from the local list and refresh the UI
                volunteers.RemoveAll(v => v.VolunteerId == volunteerId);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing volunteer {volunteerId}: {ex.Message}");
        }
    }

    // Helper method to display full availability text
    private string GetFullAvailabilityText(string availabilityValue)
    {
        switch (availabilityValue)
        {
            case "Weekdays-All":
                return "Weekdays - all day";
            case "Weekdays-AM":
                return "Weekdays - 08:00am to 12:00am";
            case "Weekdays-PM":
                return "Weekdays - 13:00pm to 17:00";
            case "Saturday-All":
                return "Saturday - all day";
            case "Saturday-AM":
                return "Saturday - 08:00am to 12:00am";
            case "Saturday-PM":
                return "Saturday - 13:00pm to 17:00";
            default:
                return availabilityValue; // As a fallback
        }
    }
}