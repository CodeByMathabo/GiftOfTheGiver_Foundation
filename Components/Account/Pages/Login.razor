@page "/Account/Login"
@layout Components.Layout.AuthLayout


@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using GiftOfTheGiver_Foundation.Data
@using Microsoft.AspNetCore.Mvc


@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<h3 class="form-title">Log in</h3>
<p class="form-subtitle">Welcome back! Login to continue.</p>

<EditForm Model="Input" OnValidSubmit="LoginUser" FormName="login" Enhance>
    <DataAnnotationsValidator />

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="snackbar error" role="alert">
            @errorMessage
        </div>
    }

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
        <ValidationMessage For="() => Input.Email" class="validation-message" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="Input.Password" type="password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
        <ValidationMessage For="() => Input.Password" class="validation-message" />
    </div>

    <div class="form-group" style="display: flex; align-items: center; gap: 0.5rem; color: #ccc;">
        <InputCheckbox @bind-Value="Input.RememberMe" id="remember-me" style="width: auto;" />
        <label for="remember-me" style="margin: 0; font-weight: normal;">Remember me</label>
    </div>

    <button disabled="@isProcessing" type="submit" class="btn btn-primary btn-block">
        @if (isProcessing)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        }
        else
        {
            <span>Log in</span>
        }
    </button>
</EditForm>

<p class="text-center">
    <a href="Account/ForgotPassword">Forgot your password?</a>
</p>
<p class="text-center">
    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
</p>
<p class="text-center">
    <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
</p>


@code {
    private bool isProcessing = false;
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        isProcessing = true;
        errorMessage = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            // This doesn't count login failures towards account lockout
            // To enable password failures to trigger account lockout, set lockoutOnFailure: true
            var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
            if (result.Succeeded)
            {
                Logger.LogInformation("User logged in.");
                RedirectManager.RedirectTo(ReturnUrl);
            }
            else if (result.RequiresTwoFactor)
            {
                RedirectManager.RedirectTo(
                    "Account/LoginWith2fa",
                    new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
            }
            else if (result.IsLockedOut)
            {
                Logger.LogWarning("User account locked out.");
                RedirectManager.RedirectTo("Account/Lockout");
            }
            else
            {
                errorMessage = "Error: Invalid login attempt.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "An unexpected error occurred during login.");
            errorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            isProcessing = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}