@using GiftOfTheGiver_Foundation.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager

@if (IsVisible)
{
    <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content report-card">
                <div class="modal-header card-header">
                    <h5 class="modal-title card-header-title">Approve and Link Volunteer</h5>
                    <button type="button" class="btn-close" @onclick="Cancel"></button>
                </div>
                <div class="modal-body card-body">
                    <p>You are approving <strong>@VolunteerToApprove?.VolunteerName</strong>.</p>
                    <p>To allow this volunteer to be promoted to Admin later, link them to a registered user account. Search for the user's email below.</p>

                    <div class="input-group mb-3">
                        <input type="email" class="form-control" placeholder="Search by user email..." @bind="searchEmail" @bind:event="oninput" />
                        <button class="btn btn-outline-primary" type="button" @onclick="SearchUsers">Search</button>
                    </div>

                    @if (!string.IsNullOrEmpty(searchMessage))
                    {
                        <div class="alert alert-info">@searchMessage</div>
                    }

                    @if (searchResults.Any())
                    {
                        <div class="list-group" style="max-height: 200px; overflow-y: auto;">
                            @foreach (var user in searchResults)
                            {
                                <button type="button"
                                        class="list-group-item list-group-item-action @(selectedUser == user ? "active" : "")"
                                        @onclick="() => selectedUser = user">
                                    <strong>@user.Email</strong>
                                </button>
                            }
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                    <button type="button" class="btn btn-outline-warning" @onclick="SkipAndApprove">Approve (No Link)</button>
                    <button type="button" class="btn btn-success" @onclick="ConfirmAndApprove" disabled="@(selectedUser == null)">Link and Approve</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public GiftOfTheGiver_Foundation.Models.Volunteer? VolunteerToApprove { get; set; }

    [Parameter]
    public EventCallback<string?> OnConfirm { get; set; } // string? is the ApplicationUserId (or null)

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private string searchEmail = string.Empty;
    private string searchMessage = string.Empty;
    private List<ApplicationUser> searchResults = new();
    private ApplicationUser? selectedUser;

    protected override void OnParametersSet()
    {
        // Pre-fill search with volunteer's email
        if (VolunteerToApprove != null)
        {
            // This line will now work
            searchEmail = VolunteerToApprove.VolunteerEmail;
        }
        // Clear previous results
        searchResults.Clear();
        selectedUser = null;
        searchMessage = string.Empty;
    }

    private async Task SearchUsers()
    {
        selectedUser = null;
        searchResults.Clear();
        if (string.IsNullOrWhiteSpace(searchEmail))
        {
            searchMessage = "Please enter an email to search.";
            return;
        }

        try
        {
            var users = await UserManager.Users
                .Where(u => u.Email!.Contains(searchEmail))
                .Take(10) // Limit results
                .ToListAsync();
            if (users.Any())
            {
                searchResults = users;
                searchMessage = $"{users.Count} user(s) found.";
            }
            else
            {
                searchMessage = "No registered users found with that email.";
            }
        }
        catch (Exception ex)
        {
            searchMessage = $"Error searching users: {ex.Message}";
        }
    }

    private async Task ConfirmAndApprove()
    {
        await OnConfirm.InvokeAsync(selectedUser?.Id);
    }

    private async Task SkipAndApprove()
    {
        await OnConfirm.InvokeAsync(null); // Send null to indicate no link
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }
}