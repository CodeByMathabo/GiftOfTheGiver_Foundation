@using GiftOfTheGiver_Foundation.Data
@using GiftOfTheGiver_Foundation.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@using VolunteerModel = GiftOfTheGiver_Foundation.Models.Volunteer

@if (incident != null)
{
    <div class="modal-backdrop fade show"></div>

    <div class="modal fade show" tabindex="-1" style="display: block;">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">

                <div class="modal-header">
                    <h5 class="modal-title">Resolve & Debrief Incident</h5>
                    <button type="button" class="btn-close" @onclick="Cancel"></button>
                </div>

                <div class="modal-body">
                    <p>Resolving **INC-@incident.DisasterReportId.ToString("D3")**: @incident.IncidentType</p>

                    @if (assignedVolunteers.Any())
                    {
                        <h6>Confirm Volunteer Attendance</h6>
                        <div class="list-group">
                            @foreach (var volunteer in assignedVolunteers)
                            {
                                <label class="list-group-item">
                                    <input class="form-check-input me-1"
                                           type="checkbox"
                                           @onchange="(e) => ToggleAttendance(volunteer.VolunteerId, (bool)e.Value)"
                                           checked="@attendance.ContainsKey(volunteer.VolunteerId)">
                                    <strong>@volunteer.VolunteerName</strong>
                                    <small class="text-muted"> (@volunteer.HelpType / @volunteer.VolunteerContact)</small>
                                </label>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">No volunteers were assigned to this incident.</div>
                    }

                    <div class="mt-3">
                        <label for="resolutionNotes" class="form-label"><strong>Resolution Notes (Mandatory)</strong></label>
                        <textarea id="resolutionNotes" class="form-control" rows="4" @bind="resolutionNotes" @bind:event="oninput"></textarea>
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3">@errorMessage</div>
                    }
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                    <button type="button" class="btn btn-success" @onclick="HandleResolve" disabled="@(string.IsNullOrWhiteSpace(resolutionNotes))">
                        Confirm & Resolve
                    </button>
                </div>

            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int IncidentId { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private DisasterReport? incident;
    private List<VolunteerModel> assignedVolunteers = new();

    // Key = VolunteerId, Value = Attended (bool)
    private Dictionary<int, bool> attendance = new();
    private string resolutionNotes = "";
    private string? errorMessage;

    protected override async Task OnParametersSetAsync()
    {
        await LoadDebriefData();
    }

    private async Task LoadDebriefData()
    {
        try
        {
            await using var dbContext = await DbFactory.CreateDbContextAsync();

            incident = await dbContext.DisasterReports.FindAsync(IncidentId);

            // This query is NOT ambiguous because we start from IncidentAssignments
            // and explicitly include the related Volunteer model.
            assignedVolunteers = await dbContext.IncidentAssignments
                .Where(a => a.DisasterReportId == IncidentId)
                .Select(a => a.Volunteer)
                .ToListAsync();

            // Clear previous state
            attendance.Clear();
            resolutionNotes = "";
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
    }

    private void ToggleAttendance(int volunteerId, bool isChecked)
    {
        if (isChecked)
        {
            if (!attendance.ContainsKey(volunteerId))
            {
                attendance.Add(volunteerId, true);
            }
        }
        else
        {
            attendance.Remove(volunteerId);
        }
    }

    private async Task HandleResolve()
    {
        if (string.IsNullOrWhiteSpace(resolutionNotes))
        {
            errorMessage = "Resolution notes are mandatory.";
            return;
        }

        try
        {
            await using var dbContext = await DbFactory.CreateDbContextAsync();

            // 1. Update the Incident itself
            var incidentToUpdate = await dbContext.DisasterReports.FindAsync(IncidentId);
            if (incidentToUpdate == null)
            {
                errorMessage = "Incident not found.";
                return;
            }

            incidentToUpdate.ResolvedDate = DateTime.UtcNow;
            incidentToUpdate.ResolutionNotes = resolutionNotes; // Save the notes

            // 2. Update attendance for each assigned volunteer
            foreach (var volunteerId in assignedVolunteers.Select(v => v.VolunteerId))
            {
                var assignment = await dbContext.IncidentAssignments
                    .FirstOrDefaultAsync(a => a.DisasterReportId == IncidentId && a.VolunteerId == volunteerId);

                if (assignment != null)
                {
                    if (attendance.ContainsKey(volunteerId))
                    {
                        // They attended
                        assignment.AttendedDate = DateTime.UtcNow;
                    }
                    else
                    {
                        // They did not attend
                        assignment.AttendedDate = null;
                    }
                }
            }

            // 3. Save all changes
            await dbContext.SaveChangesAsync();
            await OnClose.InvokeAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error resolving incident: {ex.Message}";
        }
    }

    private async Task Cancel()
    {
        await OnClose.InvokeAsync();
    }
}